version: 0.2

env:
  shell: bash
  parameter-store:
    DOCKERHUB_TOKEN:  DOCKERHUB_TOKEN
#    CODECOV_TOKEN: CODECOV_TOKEN
  exported-variables:
    - PROJECT_VERSION
    - IMAGE_EXISTS

phases:
  install:
    runtime-versions:
      docker: 18
      java: openjdk8
    commands:
      # Get information about this image, the current directory, maven version, docker version.
      # Update apg-get.
      # Install yq.
      - lsb_release -a
      - pwd
      - mvn --version
      - docker --version
      - docker info
      - apt-get update
      - apt-get yq

  pre_build:
    commands:
      # Get project's version from pom.xml.
      - PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)

      # Check if the image exists in docker hub already.  If the image tag matches the project's version from the POM,
      # then exit/fail the build.
      - IMAGE_EXISTS=$(docker pull joneschris/qb4j-api:"$PROJECT_VERSION" > /dev/null && echo "true" || echo "false")
      - echo "Does the image exist?  $IMAGE_EXISTS"
      - |
        if [ "$IMAGE_EXISTS" == "true" ]; then
          echo "The image, $PROJECT_VERSION, already exists.  You probably need to bump the project's version in the pom.xml."
          exit 1
        fi

      # Copy custom maven settings from S3 bucket.
      - aws s3 cp s3://maven-build-settings/qb4j_settings.xml /root/.m2/settings.xml

      # Set qb4j.env property in application.yml to `nonLocal` because `local` is only used for local debugging.
      # `nonLocal` will cause the DataConfig class to create a bean from the DataConfig#getTargetDatabasesNonLocal method when the Spring app starts.
      # This bean will look for a qb4jConfig property by calling System#getProperty("qb4jConfig") rather than using the
      # local-qb4j.yml file under resources, which is only intended to be used for local debugging and development.
      - yq w -i src/main/resources/application.yml qb4j.env nonLocal

  build:
    commands:
      # Build the uber jar and run unit tests.
      - mvn clean install

      # Build docker image
      - docker image build -t joneschris/qb4j-api:"$PROJECT_VERSION" --build-arg project_version="$PROJECT_VERSION" .

  post_build:
    commands:
      # Zip the swarm directory.  Use the CODEBUILD_BUILD_NUMBER environment variable, which is the number of the build.
#      - ZIP_FILE="$CODEBUILD_BUILD_NUMBER.zip"
#      - zip -r $ZIP_FILE ./cicd/deployment/swarm/
      # Copy the zip file to S3.
#      - aws s3 cp $ZIP_FILE s3://qb4j-mvc/$ZIP_FILE

        # todo:  pass the zip file as an argument to the bash script below.
      - bash ./cicd/buildspec_steps/1_post_build.bash "$DOCKERHUB_TOKEN" "$PROJECT_VERSION"

artifacts:
  files:
    - target/qb4j-api-$PROJECT_VERSION.jar
  discard-paths: yes
#  secondary-artifacts:
#    code_coverage:
#      files:
#        - target/site/jacoco/**/*  # All files recursively in jacoco directory.
#      name: code_coverage.zip
cache:
  paths:
    - '/root/.m2/**/*'
